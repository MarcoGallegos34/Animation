import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
%matplotlib inline

np.random.seed(19680802)

fig = plt.figure(figsize=(7, 7))
ax = fig.add_axes([0, 0, 1, 1], frameon=False)
ax.set_xlim(0, 1), ax.set_xticks([])
ax.set_ylim(0, 1), ax.set_yticks([])

n_drops = 50
rain_drops = np.zeros(n_drops, dtype=[('position', float, 2),
                                      ('size',     float, 1),
                                      ('speed',   float, 1),
                                      ('color',    float, 4)])

rain_drops['position'] = np.random.uniform(0, 1, (n_drops, 2))
rain_drops['speed'] = np.random.uniform(0.1, 0.25, n_drops)
rain_drops['size'] = np.random.uniform(200, 4000, n_drops)
#rain_drops['growth'] = np.random.uniform(200, 5000, n_drops)

cat = np.where(rain_drops['position'][:,0]<0.33, 0, (np.where(rain_drops['position'][:,0]>0.66,1,2)))
cmap = np.array(['b','g','r'])

scat = ax.scatter(rain_drops['position'][:, 0], rain_drops['position'][:, 1],
                  s=rain_drops['size'], lw=0.5, edgecolors=rain_drops['color'],
                  facecolors='none',c=cmap[cat], marker='s')


def update(frame_number):
    # Get an index which we can use to re-spawn the oldest raindrop.
    current_index = frame_number % n_drops

    # Make all colors more transparent as time progresses.
    rain_drops['color'][:, 3] -= 1.0/len(rain_drops)
    rain_drops['color'][:, 3] = np.clip(rain_drops['color'][:, 3], 0, 1)

    # Make all circles bigger.
    rain_drops['position'][:,1] -= rain_drops['speed']
    #rain_drops['size'] += rain_drops['growth']
    
    # Pick a new position for oldest rain drop, resetting its size,
    # color and growth factor.
    rain_drops['position'][current_index] = np.random.uniform(0, 1, 2)
    rain_drops['size'][current_index] = 3000
    rain_drops['color'][current_index] = (0, 0, 0, 1)
    rain_drops['speed'][current_index] = np.random.uniform(0.1, 0.25)

    # Update the scatter collection, with the new colors, sizes and positions.
    scat.set_edgecolors(rain_drops['color'])
    scat.set_sizes(rain_drops['size'])
    scat.set_offsets(rain_drops['position'])
    #scat.set_facecolor = np.random.choice(np.array(['b','g','r','c','m','y','k']),1)
    
animation = FuncAnimation(fig, update, interval=10)

animation.save('basic_animation_tetris.mp4', fps=10, extra_args=['-vcodec', 'libx264'])
